	
							 spiketime		
								^
					  lookback  | lookahead   
							|   |  |
							V	|  V
						  |-----^----|	
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~						 
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~ 							cut_duration=	
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~					   (lookback + lookahead) 
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~							------------>
			  trace | ~~~~|~~~~!!!~~~|~~~~~~~	 Extract snippet	   |   |--^--|   Reshape to	   
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~	----------------->	   |   |-----|  ------------> |-^-------!!!-----|
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~						   |   |-!!!-|	vector               length = 
			  trace | ~~~~|~~~~~~~~~~|~~~~~~~						   |   |-----|				cut_duration*trode  
						  |----------|		 						   V										|	
						  											len(trode)									|	
						  																						|
											Form a matrix from all snippets.									|
											One snippet for each time the voltage								|
											one a channel crosses the thresdhold								|	
			----------------------------------------------------------------------------------------------------|
			|
			V	  			length = 
					  cut_duration * trode
						 (units of time
						 ----------------->
					   |  		...
			One row	   |  --^-------!!!-----
			for each   |  -----!---!----^---		 Dimensionality reduction
			spike	   |  		...			         -------------------------->  For PCA each ROW should be a NEURON
			for each   |  		...							with PCA			  (The general term is observation.) 
			channel	   |  --!!-------^------								      Each COLUMN should be a TIMESTAMP.
					   V   													      (The general term is variable.)
					   
					   
			   In this schematic, PCA can be viewed as finding the shortest yet most informative horizontal axis.
		
					Cluster on most informative subspace of the data's eigenspace. My default is to use the first
					three principal components (PCs). This schematic begins with the projection of a snippet onto
					the first two principal components. 
					
					
					  Output of tech.princomp
								|
								|
				   --------------------------
				   |			|			|
				   V			|		   V
			   Eigenvalues  	|	   Eigenvectors	
						  		V
							 PCs 		
						 ------------>		
						 | 						Cluster   			Pycluster expects the
	 	 Projections	 |				--------------------->	    ROWS to correspond to PCs
		(Neurons)		 |					(Must transpose)		(well genes, it was designed for microarrays)
						 |											and COLUMNS to correspond to Neurons
						 V 											(the documentations says "experiments")
			  N.B. I only use the middle element
			  that tech.princomp returns. That's why	 
			  there is a [1] in the list comprehension							  
			  below. It is the second element, if you 		 
			  count from 0.											
												  															
